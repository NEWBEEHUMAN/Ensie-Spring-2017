<?php
/**
 * Created by PhpStorm.
 * User: Badjak
 * Date: 22-7-14
 * Time: 21:02
 */

namespace Ensie\UserBundle\Controller;

use Ensie\MandrillMailerBundle\Service\MandrillMailSender;
use Ensie\UserBundle\Entity\EnsieUser;
use FOS\UserBundle\Controller\ResettingController as BaseController;
use Ensie\LanguageBundle\Traits\GetCurrentLanguageTrait;
use FOS\UserBundle\Event\FilterUserResponseEvent;
use FOS\UserBundle\Event\FormEvent;
use FOS\UserBundle\Event\GetResponseUserEvent;
use FOS\UserBundle\FOSUserEvents;
use FOS\UserBundle\Model\UserInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;

class ResettingController extends BaseController
{
    use GetCurrentLanguageTrait;

    public function requestAction()
    {
        return parent::requestAction(); // TODO: Change the autogenerated stub
    }

    public function sendEmailAction(Request $request)
    {
        $username = $request->request->get('username');

        /** @var $user EnsieUser */
        $user = $this->get('fos_user.user_manager')->findUserByUsernameOrEmail($username);

        if (null === $user or $user->getLinkedinId()) {
            return $this->render('FOSUserBundle:Resetting:request.html.twig', array(
                'invalid_username' => $username
            ));
        }

        if ($user->isPasswordRequestNonExpired($this->container->getParameter('fos_user.resetting.token_ttl'))) {
            return $this->render('FOSUserBundle:Resetting:passwordAlreadyRequested.html.twig');
        }

        if (null === $user->getConfirmationToken()) {
            /** @var $tokenGenerator \FOS\UserBundle\Util\TokenGeneratorInterface */
            $tokenGenerator = $this->get('fos_user.util.token_generator');
            $user->setConfirmationToken($tokenGenerator->generateToken());
        }

        $url = $this->generateUrl('fos_user_resetting_overlay', array('token' => $user->getConfirmationToken()), true);

        /** Own code TODO: overwrite the fos mailer class*/
        /** @var MandrillMailSender $mandrillMailSender */
        $mandrillMailSender = $this->get('mandrill_mailer.mandrill_mail_sender');
        $mandrillMailSender->send($user, 'reset', 'password', array(
            'CONFIRMATIONURL' => $url
        ));

        $user->setPasswordRequestedAt(new \DateTime());
        $this->get('fos_user.user_manager')->updateUser($user);

        return new RedirectResponse($this->generateUrl('fos_user_resetting_check_email',
            array('email' => $this->getObfuscatedEmail($user))
        ));
    }

    public function resetOverlayAction(Request $request, $token)
    {
        return new RedirectResponse($this->generateUrl('home',
            array('token' => $token)
        ));
    }

    public function resetAction(Request $request, $token)
    {
        try{
            return parent::resetAction($request, $token); // TODO: Change the autogenerated stub
        } catch (NotFoundHttpException $e){
            return $this->render('FOSUserBundle:Resetting:resetUserNotFound.html.twig');
        }
    }

    /**
     * @Template()
     */
    public function resetSuccessAction(Request $request)
    {
        return array();
    }

}