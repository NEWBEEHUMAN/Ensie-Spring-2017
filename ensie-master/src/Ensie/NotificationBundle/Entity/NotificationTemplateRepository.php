<?php

namespace Ensie\NotificationBundle\Entity;

use Doctrine\DBAL\LockMode;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;
use Ensie\NotificationBundle\Notification\NotificationTemplateNotFoundException;

/**
 * NotificationTemplateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationTemplateRepository extends EntityRepository
{

    /**
     * @param $identifier
     * @param $title
     * @param $template
     * @param $locale
     * @return NotificationTemplate|null|object
     */
    public function create($identifier, $title, $template, $locale)
    {
        $notificationTemplate = $this->findByIdentifier($identifier);
        if (!$notificationTemplate) {
            $notificationTemplate = $this->createTranslation($identifier, $title, $template, $locale);
            $this->getEntityManager()->flush();
        }
        $notificationTemplate = $this->addTranslation($notificationTemplate, $title, $template, $locale);
        return $notificationTemplate;
    }

    /**
     * @param $identifier
     * @param $title
     * @param $template
     * @param $locale
     * @return NotificationTemplate
     */
    private function createTranslation($identifier, $title, $template, $locale)
    {
        $notificationTemplate = new NotificationTemplate();
        $notificationTemplate->setIdentifier($identifier);
        $this->getEntityManager()->persist($notificationTemplate);
        return $this->addTranslation($notificationTemplate, $title, $template, $locale);
    }

    /**
     * @param NotificationTemplate $notificationTemplate
     * @param $title
     * @param $template
     * @param $locale
     * @return NotificationTemplate
     */
    private function addTranslation(NotificationTemplate $notificationTemplate, $title, $template, $locale)
    {
        /** @var NotificationTemplateTranslation $translation */
        $translation = $notificationTemplate->translate($locale);
        if ($translation->getLocale() == $locale and $translation->getId() != null) {
            $translation->setTitle($title);
            $translation->setTemplate($template);
        } else {
            $translation = new NotificationTemplateTranslation();
            $translation->setTitle($title);
            $translation->setTemplate($template);
            $translation->setLocale($locale);
            $notificationTemplate->addTranslation($translation);
        }
        return $notificationTemplate;
    }

    /**
     * @param $identifier
     * @return null|object
     */
    private function findByIdentifier($identifier)
    {
        return $this->findOneBy(array('identifier' => $identifier));
    }

    /**
     * @param $identifier
     * @param $locale
     * @return NotificationTemplateTranslation
     * @throws \Ensie\NotificationBundle\Notification\NotificationTemplateNotFoundException
     */
    public function findByIdentifierAndLocale($identifier, $locale)
    {
        $qb = $this->createQueryBuilder('notificationTemplate');
        //$qb->leftJoin('notificationTemplate.translations', 'translations', 'WITH', 'translations.local = :locale');
        $qb->where('notificationTemplate.identifier = :identifier');
        $qb->setMaxResults(1);
        $qb->setParameter('identifier', $identifier);
        $query = $qb->getQuery();
        try {
            /** @var NotificationTemplate $notificationTemplate */
            $notificationTemplate = $query->getSingleResult();
            return $notificationTemplate->translate($locale);
        } catch (NoResultException $e) {
            throw new NotificationTemplateNotFoundException('Could not find notification template: ' . $identifier);
        }
    }

}
