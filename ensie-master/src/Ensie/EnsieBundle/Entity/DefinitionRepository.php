<?php

namespace Ensie\EnsieBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Ensie\LanguageBundle\Entity\Language;
use Ensie\UserBundle\Entity\EnsieUser;

/**
 * DefinitionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DefinitionRepository extends EntityRepository
{

    /**
     * @param $userSlug
     * @param $definitionSlug
     * @param Language $language
     * @return array
     */
    public function getByUserSlugAndDefinitionSlug($userSlug, $definitionSlug, Language $language)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition, language, ensieUser');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.ensieUser', 'ensieUser');
        $qb->innerJoin('definition.language', 'language', 'WITH', 'language = :language');
        $qb->where('ensieUser.slug = :userSlug');
        $qb->andWhere('definition.slug = :definitionSlug');
        $qb->andWhere('definition.validated = 1');
        $qb->setParameter('userSlug', $userSlug);
        $qb->setParameter('definitionSlug', $definitionSlug);
        $qb->setParameter('language', $language);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Ensie $ensie
     * @param Language $language
     * @param array $excludeIds
     * @param $limit
     * @return array
     */
    public function getByEnsie(Ensie $ensie, Language $language, array $excludeIds = array(), $limit = null)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition, language, ensie, ensieUser');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.ensie', 'ensie', 'WITH', 'ensie.id = :ensie');
        $qb->innerJoin('definition.ensieUser', 'ensieUser');
        $qb->innerJoin('definition.language', 'language', 'WITH', 'language = :language');
        $qb->where('definition.id NOT IN (:excludeIds)');
        $qb->andWhere('definition.validated = 1');
        $qb->setParameter('ensie', $ensie);
        $qb->setParameter('excludeIds', $excludeIds);
        $qb->setParameter('language', $language);
        if($limit){
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $slug
     * @param Language $language
     * @return array
     */
    public function getBySlug($slug, Language $language)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition, language');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.language', 'language', 'WITH', 'language = :language');
        $qb->innerJoin('definition.ensieUser', 'ensieUser', 'WITH', 'ensieUser.enabledWriter = 1');
        $qb->andWhere('definition.slug = :slug');
        $qb->andWhere('definition.validated = 1');
        $qb->orderBy('definition.viewCount', 'desc');
        $qb->setParameter('slug', $slug);
        $qb->setParameter('language', $language);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $word
     * @param EnsieUser $user
     * @param Language $language
     * @return mixed
     * Used for unique word validation
     */
    public function getByWordUserLanguage($word, EnsieUser $user, Language $language){
        $qb = $this->createQueryBuilder('definition');
        $qb->where('definition.ensieUser = :user');
        $qb->andWhere('definition.word = :word');
        $qb->andWhere('definition.language = :language');
        $qb->setParameter('user', $user);
        $qb->setParameter('word', $word);
        $qb->setParameter('language', $language);
        return $qb->getQuery()->execute();
    }

    /**
     * @param $search
     * @param Language $language
     * @return array
     */
    public function autoCompleteSearch($search, Language $language)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.ensieUser', 'ensieUser');
        $qb->innerJoin('definition.language', 'language', 'WITH', 'language = :language');
        $qb->where('definition.word LIKE :search');
        $qb->andWhere('ensieUser.enabled = 1');
        $qb->andWhere('ensieUser.enabledWriter = 1');
        $qb->andWhere('definition.validated = 1');
        $qb->orderBy('definition.viewCount', 'desc');
        $qb->groupBy('definition.word');
        $qb->setParameter('search', $search.'%');
        $qb->setParameter('language', $language);
        $qb->setMaxResults(10);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param Definition $definition
     * @param $views
     * @return Definition
     */
    public function updateViews(Definition $definition, $views)
    {
        $definition->setViewCount($views);
        $this->getEntityManager()->persist($views);
        return $definition;
    }


    /**
     * @param $maxResult
     * @param Language $language
     * @return array
     */
    public function getList($maxResult, Language $language)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition, language', 'ensieUser');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.ensieUser', 'ensieUser', 'WITH', 'ensieUser.enabledWriter = 1');
        $qb->leftJoin('definition.language', 'language');
        $qb->where('definition.language = :language');
        $qb->setMaxResults($maxResult);
        $qb->orderBy('definition.createdAt', 'DESC');
        $qb->setParameter('language', $language);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param EnsieUser $ensieUser
     * @param Language $language
     * @param $sort
     * @param $order
     * @param int $limit
     * @return array
     */
    public function getByUser(EnsieUser $ensieUser, Language $language, $sort, $order, $limit = 0)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('definition, ensie, language');
        $qb->from('Ensie\EnsieBundle\Entity\Definition', 'definition');
        $qb->innerJoin('definition.ensie', 'ensie');
        $qb->innerJoin('definition.language', 'language', 'WITH', 'language = :language');
        $qb->where('definition.ensieUser = :ensieUser');
        $qb->orderBy('definition.' . $sort, $order);
        if($limit > 0){
            $qb->setMaxResults($limit);
        }
        $qb->setParameter('ensieUser', $ensieUser);
        $qb->setParameter('language', $language);
        return $qb->getQuery()->getResult();
    }
}
