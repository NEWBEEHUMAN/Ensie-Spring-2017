<?php

namespace Ensie\EnsieBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Ensie\EnsieBundle\Event\Events\DefinitionEvents;
use Ensie\EnsieBundle\Event\Events\DefinitionRatedEvent;
use Ensie\UserBundle\Entity\EnsieUser;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;

/**
 * RatingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RatingRepository extends EntityRepository
{

    /** @var  EventDispatcherInterface */
    private $eventDispatcher;

    public function setEventDispatcher(EventDispatcherInterface $eventDispatcher){
        $this->eventDispatcher = $eventDispatcher;
    }

    /**
     * @param Definition $definition
     * @param EnsieUser $user
     * @param $ratingValue
     * @param $feedback
     * @return Rating
     */
    public function create(Definition $definition, EnsieUser $user, $ratingValue, $feedback){
        $rating = new Rating();
        $rating->setDefinition($definition);
        $rating->setIpAddress($_SERVER['REMOTE_ADDR']);
        $rating->setRating($ratingValue);
        $rating->setUser($user);
        $rating->setFeedback($feedback);
        $this->getEntityManager()->persist($rating);
        return $rating;
    }

    /**
     * @param Definition $definition
     * @param EnsieUser $user
     * @param $ratingValue
     * @param string $feedback
     * @return Rating|mixed
     */
    public function addRating(Definition $definition, EnsieUser $user, $ratingValue, $feedback = ''){
        $rating = $this->getByUserAndDefinition($definition, $user);
        if($rating){
            /** @var Rating $rating */
            $rating->setRating($ratingValue);
        }
        else{
            $rating = $this->create($definition, $user, $ratingValue, $feedback);
            if($feedback){
                $this->eventDispatcher->dispatch(DefinitionEvents::DEFINITION_RATED_FEEDBACK, new DefinitionRatedEvent($rating));
            } else {
                $this->eventDispatcher->dispatch(DefinitionEvents::DEFINITION_RATED, new DefinitionRatedEvent($rating));
            }
        }
        return $rating;
    }

    public function getByUserAndDefinition(Definition $definition, EnsieUser $user){
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('rating');
        $qb->from('Ensie\EnsieBundle\Entity\Rating','rating');
        $qb->where('rating.definition = :definition');
        $qb->andWhere('rating.user = :user');
        $qb->setParameter('definition', $definition);
        $qb->setParameter('user', $user);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Definition $definition
     * @return double
     */
    public function countRatings(Definition $definition)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('avg(rating.rating)');
        $qb->from('Ensie\EnsieBundle\Entity\Rating','rating');
        $qb->where('rating.definition = :definition');
        $qb->setParameter('definition', $definition);

        return $qb->getQuery()->getSingleScalarResult();
    }

}
